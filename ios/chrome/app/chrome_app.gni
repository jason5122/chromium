# Copyright 2023 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/ios/ios_sdk.gni")
import("//build/config/ios/rules.gni")
import("//ios/chrome/features.gni")

# Template used to create a Chrome-like app bundle. This is used to share
# the logic required to support ios_use_chrome_main_module between Chrome
# and the integration tests.
#
# Arguments
#
#   output_name
#
#       (optional) string, name of the application bundle, if omitted
#       defaults to `target_name`
#
template("chrome_app") {
  _target_name = target_name
  _output_name = target_name
  if (defined(invoker.output_name)) {
    _output_name = invoker.output_name
  }

  if (ios_use_chrome_main_module) {
    ios_framework_bundle("${_target_name}_main_framework") {
      forward_variables_from(invoker,
                             [
                               "deps",
                               "framework_dirs",
                               "frameworks",
                               "public_configs",
                               "public_deps",
                               "sources",
                               "testonly",
                             ])

      # Explicitly clobber configs inherited from `set_defaults(...)`, then
      # add back `//build/config:shared_library_config` since this builds a
      # shared library.
      if (defined(invoker.configs)) {
        configs = []
        configs = invoker.configs + [ "//build/config:shared_library_config" ]
      }

      transparent = true
      output_name = "${_output_name}Main"

      info_plist = "//ios/chrome/app/resources/ChromeMainInfo.plist"
      extra_substitutions =
          [ "BUNDLE_IDENTIFIER=$ios_app_bundle_id_prefix.$output_name" ]
    }
  } else {
    not_needed([ "_output_name" ])
  }

  ios_app_bundle(_target_name) {
    if (!ios_use_chrome_main_module) {
      forward_variables_from(invoker, "*", TESTONLY_AND_VISIBILITY)
      forward_variables_from(invoker, TESTONLY_AND_VISIBILITY)
    } else {
      forward_variables_from(invoker,
                             "*",
                             [
                               "defines",
                               "deps",
                               "framework_dirs",
                               "frameworks",
                               "public_deps",
                               "sources",
                             ])

      configs = []
      configs = default_executable_configs

      sources = [ "//ios/chrome/app/chrome_loader_main.cc" ]

      defines = [ "CHROME_MAIN_FRAMEWORK_NAME=\"${_output_name}Main\"" ]

      deps = [
        "//base/allocator:early_zone_registration_mac",
        "//base/allocator/partition_allocator:partition_alloc_buildflags",
      ]

      if (!defined(bundle_deps)) {
        bundle_deps = []
      }
      bundle_deps += [ ":${_target_name}_main_framework+bundle" ]
    }
  }
}
